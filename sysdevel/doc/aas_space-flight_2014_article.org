#+TITLE:     Multi-Model Orbital Simulation Development with Python
#+AUTHOR:    Sean M. Brennan\thanks{Research Scientist, Space Data Systems, Intelligence and Space Research (ISR), Los Alamos National Laboratory (LANL), Los Alamos, NM 87545}, Michael A. Shoemaker\thanks{Postdoctoral Research Associate, Space Science and Applications, ISR, LANL, Los Alamos, NM 87545}, Andrew C. Walker\thanks{Postdoctoral Research Associate, Space Science and Applications, ISR, LANL, Los Alamos, NM 87545}, Humberto C. Godinez Vazquez\thanks{Research Scientist, Applied Mathematics and Plasma Physics, Theoretical Division, LANL, Los Alamos, NM 87545}, and Joseph Koller\thanks{Project Leader, Space Science and Applications, ISR, LANL, Los Alamos, NM 87545}
#+EMAIL:     brennan@lanl.gov
#+DATE:

# REQUIRES:
# DitaaEPS fork at https://github.com/madeye/ditaa-eps
#   then in .emacs: (setq org-ditaa-jar-path "/path/to/ditaa-eps.jar")
# AAS cls file from http://www.univelt.com/forms/AAS%20Paper%20Format%20Instructions%20and%20Templates%20for%20LaTeX%20Users.zip


#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:auto skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LaTeX_CLASS: AAS
#+LaTeX_CLASS_OPTIONS: [letterpaper, paper, 11pt]

#+LaTeX_HEADER: \batchmode
#+LaTeX_HEADER: \usepackage{bm}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{subfigure}
#+LaTeX_HEADER: \usepackage{overcite}
#+LaTeX_HEADER: \usepackage{footnpag}
#+LaTeX_HEADER: \usepackage[colorlinks=true, pdfstartview=FitV, linkcolor=black, citecolor= black, urlcolor= black]{hyperref}

#+LaTeX_HEADER: \newcommand\blankfootnote[1]{%
#+LaTeX_HEADER:   \begingroup
#+LaTeX_HEADER:   \renewcommand\thefootnote{}\footnote{#1}%
#+LaTeX_HEADER:   \addtocounter{footnote}{-1}%
#+LaTeX_HEADER:   \endgroup
#+LaTeX_HEADER: }

#+LaTeX_HEADER: \PaperNumber{14-330}


#+LaTeX: \blankfootnote{\newline This document approved for unlimited release: LA-UR-13-29484.}

#+LaTeX: \begin{abstract}
The Integrated Modeling of Perturbation in Atmospheres for Conjunction
Tracking (IMPACT) project integrates drag modeling, orbit propagation,
and conjunction analysis to better predict collisions in orbit. This
is built on, and propels the further development of, our integration
architecture: /SysDevel/. The =sysdevel= Python package generically
aids multi-model simulation development through model coupling, data
visualization and collaborative software distribution.  We describe in
detail how /SysDevel/ handles each of these tasks, and the ongoing
challenges they present, as a case study of the IMPACT project's
integration efforts.
#+LaTeX: \end{abstract}



* Introduction

The IMPACT project at Los Alamos National Laboratory has integrated
atmospheric density modeling, drag coefficient and orbit propagation,
and statistical space object conjunction analysis in order to refine
predictions of orbital collisions. Our software integration approach
for IMPACT is an iterative development process to allow coupling of
models that are themselves in on-going development. This simulation
architecture combines the above aspects of space object positional
prediction utilizing multiple data sources and various alternative
models along the way, as illustrated in Figure [[1]]. This figure
represents an early, high-level conceptual overview, listing possible
example data and models. Koller, et al., reviews this in greater
detail. \cite{koller_impact}

Our software framework for achieving this integration handles the
coupling of not just some few of these possibilities, but it can also
take on new data and new models. Thus, while scalability is clearly
required of the IMPACT software due to the sheer number of space
objects of potential interest, malleability has also been a key
requirement.


#+BEGIN_SRC ditaa :file models.eps :cmdline --no-separation --scale 1.0 :results silent
                         /--------------------------------\     /--------------------\
                         |       Interface Module    cE64 |     |    Observations    |
                         | a. Model thermospheric density |     |  - LANL sensors    |
                         | b. Model drag coefficient      |     |  - CHAMP/GRACE     |
                         | c. Choose group of objects     |     |  - GOCE       c7AD |
                         | d. Choose time interval        |     \---------+----------/
                         \---------------+----------------/               |
                                        |                                 v
/-------------------------\             v                 /----------------------------\
| Drag Coefficient Module |    /-----------------------\  | Atmospheric Density Module |
|   - empirical           |   /+----------------------\|  |   - GITM, TIEGCM           |
|   - analytical          |  /+----------------------\||  |   - JB08, MSIS             |
|   - DAC            cFF3 |  | Propagation Module(s) |||  |   - Regression Model  cFF3 |
\------------+------------/  |     - GMAT            |||  \-------------+--------------/
             |               |     - Python          |+/                |
             +-------------->|     - others...  c9D9 +/<----------------+
                             \----------+------------/
                                        |
                                        v
                          /------------------------------\
                          |       Analysis Module   cFF3 |
                          | - Uncertainty Quantification |
                          | - Collisional probability    |
                          \------------------------------/
#+END_SRC

#+BEGIN_SRC sh :session *shell* :results silent :exports none
source ~/.bashrc
epstopdf models.eps
#+END_SRC

#+CAPTION: IMPACT concept
#+NAME:    1
[[file:models.pdf]]



The /SysDevel/ architectural meta-framework tool, which is implemented
as the open-source, Python package =sysdevel=, is the engine behind
the development of such multi-model simulation software systems. This
pure-Python package (i.e., not mixed with extensions) helps in three
major areas of code development: model coupling, data visualization,
and distribution for collaboration.

We herein review the role of /SysDevel/ in the IMPACT framework as a
case study, describing these three areas of development. Model
coupling consists of running a computational pipeline from data
sources and between models in a coherent and consistent manner without
arduous and fragile ad hoc coding. For IMPACT, we also efficiently
retain results for later, repeated use, including for verification and
validation (V&V) of model techniques. This coupling is described in
Section 2: Modeling and Simulation. The data visualization support
handles queries of those results as well as pipeline specification and
actual display. Section 3: Data Visualization details its application
in IMPACT. Section 4 covers Collaboration and Distribution, which
under /SysDevel/ significantly simplifies configuring external
dependencies, and for IMPACT there are many.


* Modeling and Simulation
** =sysdevel.modeling=

The most challenging task of the IMPACT integration effort lies in
aligning the diverse data that serve as input and output for each
model such that subsequent models can use them. Our options were to
implement an ad hoc solution for each model pairing or devise a
generic means for joining models. The latter generic approach is a
part of our /SysDevel/ architecture.

Therefore, the most conceptually interesting portion of /SysDevel/,
with respect to IMPACT, is its model integration facility. /SysDevel/
combines multiple simulation models together using the well-known
Model-View-Controller (MVC) pattern, which consists of data models (in
the case of IMPACT, orbital objects), data controllers that manipulate
those objects (IMPACT modeling processes), and data views that
represent direct hooks to plotting and visualization. Notice that
there is conflicting semantics for the word 'model' above: our use of
the term in the sense of a mathematical modeling process versus the
more general usage in the name of the well-known MVC software
pattern. In the context of MVC, we will substitute the equivalent word
'object'. These objects are the core of our model synthesis strategy.


#+BEGIN_SRC ditaa :file architecture.eps :cmdline --no-separation :results silent
                                           /-------------------------------------\
  IMPACT architecture                      | DataControllers                     |
                                           |                          +-------+  |
                                           |  /-------------------\   |  {s}  |  |   
                                           |  |        ED    c6BC |<--|       |  |
/--------------------------------------\   |  | +---+ +---+ +---+ |   |       |  |
| DataModels                           |   |  | | 1 | | 2 | | 3 | |   |       |  |
|                           +-------+  |   |  | +---+ +---+ +---+ |-->|       |  |
|                           |  {s}  |  |   |  \-------------------/   |       |  |
|                           |  HDF  |  |   |            |             |       |  |
|  /-------------------\ <--|       |  |   |            |             |       |  |
|  |        ING   c6BC |    +-------+  |   |            V             |       |  |
|  | +---+ +---+ +---+ |               |   |  /-------------------\   |       |  |
|  | | A | | B | |   | |               |-->|  |        OR    c6BC |<--|       |  |
|  | +---+ +---+ +---+ |    +-------+  |   |  | +---+ +---+ +---+ |   |       |  |
|  \-------------------/ <--|  {s}  |  |   |  | | 4 | | 5 | |   | |   |  HDF  |  |
|                           |  SQL  |  |   |  | +---+ +---+ +---+ |-->|       |  |
|                           |       |  |   |  \-------------------/   |       |  |
|                           +-------+  |   |            |             |       |  |
|                                      :   |            |             |       |  |
\--------------------------------------/   |            V             |       |  |
                                           |  /-------------------\   |       |  |
                                           |  |        US    c6BC |<--|       |  |
                                           |  | +---+ +---+ +---+ |   |       |  |
                                           |  | | 7 | | 8 | |   | |   |       |  |
                                           |  | +---+ +---+ +---+ |-->|       |  |
                                           |  \-------------------/   |       |  |
                                           |                          +-------+  |
                                           |                                     :
                                           \-------------------------------------/
                                                              |
   A. Satellite catalog                                       |
   B. LANL sensor observations                                v
   1. GITM                                       /-------------------------\
   2. MSIS                                       | DataViews               |
   3. Satellite Orbit Tomography                 |                         |
   4. SGP4                                       |  /-------------------\  |
   5. Drag propagator                            |  |        IVE   c6BC |  |
   7. Uncertainty quantification                 |  | +---+ +---+ +---+ |  |
   8. Collisional probability                    |  | | a | | b | |   | |  |
   a. Various results plots                      |  | +---+ +---+ +---+ |  |
   b. 3D visualization                           |  \-------------------/  |
                                                 |                         :
                                                 \-------------------------/
#+END_SRC

#+BEGIN_SRC sh :session *shell* :results silent :exports none
source ~/.bashrc
epstopdf architecture.eps
#+END_SRC

#+CAPTION: IMPACT MVC interactions
#+NAME:    2
[[file:architecture.pdf]]


To satisfy the design requirement of malleability, the /SysDevel/ data
classes, on which IMPACT objects are built, are self-describing using
built-in Python idioms. This feature allows IMPACT contributors to
simply alter their own data object definition (by creating a new
sub-class of the original /SysDevel/ data object) such that it
conforms to both the domain ontology of the new model as well as the
/SysDevel/ Application Programming Interface (API).

Figure [[2]] shows how the MVC pattern implemented in /SysDevel/ is
applied to IMPACT. Written as Python modules which derive from
/SysDevel/ base classes, under a single =impact= package, these
interfaces link data sources and process models to each other and to
storage. Within the =impact= package, subpackages such as =ing=
organize the various alternatives available for dynamic pipeline
creation. The following is a break-down of the /SysDevel/ classes,
their corresponding IMPACT packages, and the modules they contain:
- /SysDevel/ DataModel class
  + IMPACT-ING (INdependent Ground-truth) package
    * Satellite catalog :: from space-track.org
    * LANL sensor observations :: via a Raven-class telescope
- /SysDevel/ DataController class
  + IMPACT-ED (Estimation of Density) package
    * GITM :: Global Ionosphere-Thermosphere Model, physics-based
              atmospheric density estimation
    * MSIS :: Mass Spectrometer - Incoherent Scatter, semi-empirical
              atmospheric density
    * Satellite Orbit Tomography :: atmospheric density reconstruction
         \cite{shoemaker_tomography}
  + IMPACT-OR (ORbit propagation) package
    * SGP4 :: Standard General Perturbations orbit model (no atmosphere)
    * Drag propagation :: modeling atmospheric density, chemical
         composition, and temperature effects on drag coefficient
         \cite{walker_gas}
  + IMPACT-US (Uncertainty and Statistics) package
    * State uncertainty quantification :: using ensemble methods
    * Collision probability :: using importance sampling
- /SysDevel/ DataView class
  + IMPACT-IVE (Integrated Visualization Environment) package
    * Plotting results :: such as orbit latitude, longitude, and
         altitude, orbital eccentricity, atmospheric density along
         orbit, or distance between pairs of satellites
    * Three dimensional visualization :: (see Figure [[3]])

Empty slots in the figure represent the ability to plug in other
models, data, and display modes (though not limited to only three).

It works like this: orbital objects are loaded with data from the
satellite catalog in the ING module for a given date range. If it is
required by the orbit propagation module and not already in storage,
the density module, such as GITM, makes its computations for the date
range. The orbital objects are then propagated, adding data to the
object. Initial state as provided by the uncertainty module may or may
not be required beforehand, but it too then makes its contribution to
the orbital object. The visualization module then queries the object
for display info. For V&V, we can query observation data objects for
comparisons, and/or run multiple differing computational pipelines to
contrast techniques.

This forward object manipulation is implemented by a backward chaining
of Python attribute accesses. Each DataModel-derived object has an
=add-step()= method by which the pipeline is constructed and data
attributes are added. It also has an inherited =validate()= method
which checks that the processing pipeline will work. This check begins
with each DataView-derived object at the end of the pipeline, which
has a custom =requires()= method and verifies that the
DataController-derived object(s) feeding into it satisfies those
requirements through its =provides()= method. This chain continues
through to the DataModel-derived objects which also =provides()=,
however in this case =provides()= is automatic, returning the
attributes that have originated with the object.

Adding new models is relatively easy: create a Python interface to the
model (which could be as simple as =subprocess.call(...)=) that
defines =provides()=, =requires()=, and =control(datamodel)=. The
=control= method does the actual work and manipulates the =datamodel=
object. Likewise, new plots or other visualizations can be added by
defining just =requires()=, and =view(datamodel)=. This dynamic
computational pipeline construction allows IMPACT to both verify our
models by injecting observation data for comparison against predicted
outcomes, and to validate our own models against alternates such as
GITM versus MSIS. An experimental feature of /SysDevel/ is the ability
to integrate and utilize new models on-the-fly as long as they adhere
to the Python API described above. Code is placed in a repository and
an XML or INI definition list is fed to the backend server so the new
pipelines can be constructed using that new models and/or data sources.

As a concrete example, IMPACT pulls the =python-sgp4= package, a Python
implementation of the Vallado, et al. SGP4 revision, into the
=impact/o_r/sgp4/= directory as a submodule of the IMPACT orbit
module. \cite{vallado_revisiting} We simply add four lines to
=impact/o_r/__init__.py= to make the module aware of SGP4, and create
a =impact/o_r/sgp4/propagator.py= file, of 46 lines, to provide the
interface with IMPACT. In this case, this code consists mostly of
Spice/Naif initializations, conversions from Python objects for calls
to =twoline2rv(...)= and =sgp4(...)=, and conversion of results to
J2000 coordinates. This simple example demonstrates the ease of adding
new models into IMPACT thanks to /SysDevel/.

Under /SysDevel/, object storage is not strictly required. However, as
our development process for IMPACT iterates from 1-to-1 conjunction
analysis, expanding to multiple space object collision detection, we
move from the challenges of tieing these models together coherently, to
the additional complexities of scale. As we expand to include more and
more orbital objects, and over wider time scales, our storage
performance demands grow drastically. To achieve this required
scalability, the /SysDevel/ data object abstraction supports multiple
data storage backends. This can consist of structured Hierarchical
Data Format (HDF) files, or utilize a relational database, or even
graph databases such as Neo4J. As reflected in Figure [[2]], IMPACT
utilizes a single HDF file per time-step for the ED, OR, and US
modules. We chose HDF partly for familiarity, but also because it is a
good fit. The data generated by these three modules are rather large
(1+GB per 30 minute time-step), heterogeneous, and complex (differing
spatial grids and temporal periods), all of which is well supported by
HDF. \cite{folk_hdf}

/SysDevel/ also simplifies computational scaling by exposing,
and easing the configuration of, multiple parallel compute schemes:
from traditional MPI messaging (MPICH2, OpenMPI) to object-based, ad
hoc, computational resource discovery through Parallel Python.

Finally, /SysDevel/ provides a server module template that runs a
given computational pipeline either once as a command-line tool, or
continuously accepting queries through a well-defined query structure
over a WebSockets interface. This simulation server daemon is the
backend to a fully customizable visualization frontend on the web.


* Data Visualization
** =sysdevel/ui/=

/SysDevel/ generically assists with creating a web-based user
interface, using a Javascript and PHP framework, for configuring any
particular simulation run and viewing results. Since the simulation
server in daemon mode encodes Python objects into JSON - an ASCII
format - for transmission over WebSockets, any qualified HTML5 browser
can connect using its built-in facilities, potentially even using
Secure Sockets Layer (SSL). The simulation server governs pipeline
execution, but the /SysDevel/ and IMPACT files served by a standard
web server control the user experience. /SysDevel/ supplies some of
the framework: a Javascript WebSockets client, a PHP-based user login
facility, visual pipeline construction support, and an alternate
simulation server connection using PHP for older browsers.

#+CAPTION: IMPACT orbital visualization
#+NAME:    3
#+ATTR_LaTeX: width=.8\linewidth
[[file:orbits.pdf]]

To ensure that the potentially large data volume of a DataModel object
is not transmitted wholly, the DataView web interface uses the same
=requires()= / =provides()= mechanism described above to reduce the
data stream to the minimum. This is implemented using the same Python
modules used in the simulation integration, but now transformed by
Pyjamas, a Python to Javascript converter. Using =validate()=, these
classes verify a user-specified pipeline specification on the client
side, speeding feedback on errors.

Plotted graphs are a special case of DataView, embodied by the
PlotSeries class. On the server side, PlotSeries uses the =pylab=
package to generate a preview image and also transmits labels, axes,
and data points to the client. Previews are used to present an
overview of all plots requested, where clicking an individual image
leads to an interactive graph in the browser. These previews allow
numerous graphs to be compared at-a-glance without overwhelming the
browser as many fully interactive plots on a single page might do.

For example, to create a graph that plots a time series of distance
between two satellites, we write =impact/i_v_e/twosatdistplot.py=, a
30-line file that includes two classes: =TwoSatelliteDistanceSeries=
and =TwoSatelliteDistance=. The former class extends
=sysdevel.modeling.models.PlotSeries=, merely defining labels, and
x-axis (time) and y-axis (distance) values for a single satellite
pair. The =TwoSatelliteDistance= class extends
=sysdevel.modeling.models.GenericPlot=, incorporating the above series
for multiple satellite pairings. We then simply add this plot to the
selection list (one line).

For IMPACT, the web interface is organized into three phases: pipeline
construction, plot viewing, and three-dimensional visualization. Using
a plumbing metaphor built on /jsPlumb/ and /jQuery/ libraries, the user
graphically configures the simulation processing pipeline, choosing
which data sources and processing models to use, and data plots of
interest. These interactive results plots are displayed as soon as
data is available. To minimize computation, IMPACT stores intermediate
results, so that data from a duplicate configuration is available
immediately unless caching is overridden. This implies a potentially
long wait due to complex processing, so IMPACT makes use of user
profiles to facilitate revisiting pipeline results.

Custom visualization is easily added to this user interface, because
the framework communicates with the simulation using JSON over
WebSockets. For example, within IMPACT we not only tie into the
generic /SysDevel/ interface, but also provide a three-dimensional
visualization of orbital objects about the Earth, built with
Javascript - particularly with the help of the /three.js/ Javascript
library. A screen capture of this interactive visualization can be
seen in Figure [[3]]. Here the web interface time-steps through the
simulation results, displaying satellite tracks, positioning
uncertainty, and, optionally, atmospheric density. To reduce clutter,
we only display the most recent orbital track history. Positions are
streamed from pre-computed data from the chosen orbit propagator as
the visualization time increments.  Positional uncertainty is
indicated as a statistical cloud of points, also streamed from the
backend. Visualization scaling unfortunately is dependent on the power
of the graphics card available to the browser itself, some
environments can support as many as three to four thousand orbital
objects but others only a few hundred.

In terms of implementation effort for this visualization, /SysDevel/
provides PHP code for user login, and WebSocket implementations for
connecting the client and the server (in Javascript and Python
respectively). On the server side, a custom query implementation
handles requests and serves data, extending our normal workflow by a
few dozen lines. On the client side, we have 2456 lines split among
nine Javascript files to implement this 3D visualization as of this
writing. While this represents significant effort, it is still far
less difficult, particularly on the server side, than without the code
reuse provided in /SysDevel/.

For desktop usage, and especially for high-performing display
environments, we have been exploring several alternate approaches. One
approach we have used in the past is wxPython, but only in a pure
Python (i.e. no Javascript) client. Likewise, a solution involving
Pyjamas Desktop also requires only Python in the client code. Both
these approaches diverge from any Javascript client infrastructure,
however using node.js avoids this problem of dual client code
bases. Running already written Javascript code on the desktop allows
for better client performance than in the browser and no need for a
web server. This feature of /SysDevel/ is currently experimental.

For IMPACT, we are currently working on visualization strategies for
comparing multiple pipeline results (for example, contrasting SGP4
versus drag propagation versus observations) and for drawing attention
to close approaches and their collisional probabilities.

Clearly, this extensive client-side infrastructure is beyond the scope of
any normal Python build system. In fact, the =sysdevel.ui= module is a
collection of Javascript and PHP files rather than a Python
package. It is the /SysDevel/ build system, in particular its
=build_js= command, that configures and organizes /SysDevel/ client
support with IMPACT website software for use by a web server.


* Collaboration and Distribution
** =sysdevel.distutils=

For the sake of reproducing computation-dependent research,
it is critical to be able to consistently recreate a complex
simulation system such as IMPACT across potentially diverse computing
environments. For software development across a large or even
medium-sized team, this capability is doubly critical. /SysDevel/
glues together a wide variety of build systems into one, in order to
facilitate building a multi-model system that, by definition, consists
of separately developed code sources, each possibly targeted for very
different environments. It handles not only building your package,
including C/C++ extensions, shared libraries, and even executables,
but also downloading, building, and installing external Python
packages, native libraries, executables, compilers, and other tools.

The /SysDevel/ build system extends the built-in Python =distutils=
package, but assumes nothing about the system on which we're building,
except that Python is available. Yet /SysDevel/ =distutils= supports
not just the Python language, but also C, C++, Fortran, and
Javascript. Typically a package is built with the invocation =python
setup.py build=, and installed to the system's site-packages location
with =python setup.py install=, just as with standard distutils. In
fact, all the customization options of distutils, such as =--prefix=
or =--home= are supported. It can also recursively build sub-packages
so that self-contained (but not publicly available) Python packages
can be added to the project.

For a very simple package with no dependencies, the setup.py file will
be indistinguishable from that used with distutils. However,
/SysDevel/ provides a number of features that greatly reduce the
burden of correctly setting up a build environment:

+ Shared libraries: =sysdevel.distutils.command.build_shlib=

  While Python's built-in =distutils= has direct support for building
  static libraries through the =build_clib= command, it does not have
  a command for shared libraries. This is most likely because shared
  library installation is more complex and beyond the scope of the
  original =distutils=. /SysDevel/ handles both the compilation and
  the proper installation of shared libraries.

+ Native executables: =sysdevel.distutils.command.build_exe=

  Similar to =build_shlib=, this command extends native =distutils=
  capabilities. This executable compilation is especially useful for
  MPI tasks in a modeling system.

+ Documentation: =sysdevel.distutils.command.build_doc=

  Sphinx is a package for automatic documentation of Python
  code. /SysDevel/ supports Sphinx because a single add-on package
  allows automatic documentation of C, C++, Fortran and Javascript
  through Doxygen - all well-integrated with Sphinx-produced documents.

+ Unit testing: =sysdevel.distutils.command.test=

  /SysDevel/ uses Python's =unittest= package, but also supports C
  (using CUnit), C++ (CppUnit), Fortran (FRUIT), and Javascript (with
  QUnit) with the =test= command. This command looks for all unit test
  code in the tests directory at the base of the project.

+ External packages and libraries: =sysdevel/distutils/configure/=

  Another build system, CMake, uses both bundled and user-generated
  configuration files to specify how to build common
  dependencies. /SysDevel/ takes a similar approach, using
  configurations in the =sysdevel= package or in the =config=
  directory at the base of the project. These configurations can
  download and build third-party software, such as: libraries, files
  (like Java jars or Javascript libraries), programs (like Doxygen),
  node.js modules, or Python packages. External Python packages can
  be built either using a configuration file or by automatically
  querying the Python Package Index (PyPI) online repository.


In the case of IMPACT, for example, the build system descends into the
GITM sub-package like a recursive =make= call, running =setup.py=
here. It locates GITM's MPI and HDF5 library dependencies and the
proper Fortran compiler, fetching and installing them if any are
missing.  Finally, it creates a native executable for use in a
cluster.  For the IMPACT website, all the supporting Javascript
libraries are downloaded, Python sources translated, and HTML,
Javascript, and images all collated into an =http= directory. Those
familiar with Python will recognize that this is well beyond, yet
compatible with, the normal =distutils= build process.

In addition to easing software distribution, /SysDevel/ also seeks to
remedy a growing concern in academia - that of sharing and confirming
results. Whereas the literate programming (documentation embedded in
code) and the reproducible research (code embedded in documentation)
approaches directly address some of the issues involved in scientific
reproduction, these approaches do not scale well. The literate
programming concept, introduced by Knuth, includes tools such as
Doxygen, JavaDoc, and Python's Sphinx package, but is biased toward
documenting and explaining code.\cite{knuth_literate} Reproducible
research, represented by Emacs' Org-mode plus Babel, IPython or
Mathematica notebooks, or the RunMyCode service, accomplishes more of
what we need for OpenScience, but also have
limitations.\cite{schulte_org_mode, stodden_runmycode} Notebook-style
solutions (including Org-mode) are biased toward small data, and
either a small code-base or one managed by hand. RunMyCode.org, or
really any cloud-compute service, does not address sharing of
large-scale data and, again, implies hand-managed code.

/SysDevel/ on the other hand, is an exploration of how this issue of
data scaling might be approached: a mechanism for data-set providers
to allow computation, without necessarily providing compute resources,
while maintaining control of their data. /SysDevel/ explicitly manages
large, complex, heterogeneous computational projects and Big Data. It
provides an interface by which the user can experiment with their own
computations on data they do not own or control. Computation can even
be decoupled (although this is not yet implemented) and sent to
cloud-compute resources for greater computational scaling. These
features facilitate sharing and confirming scientific results that are
dependent on large data sets.


* Conclusion

Through these /SysDevel/ features of scalable and malleable data
unification, simulation pipeline configuration and data visualization,
and a comprehensive build system, the IMPACT framework has been able
to pull together our own diverse research models into swappable and
pluggable modules, and begin to realize verification and validation of
those models. We have also shown examples of how /SysDevel/ can
potentially save significant coding effort, yet allow the flexibility
for customization where needed.

While our focus here has strongly been the context of /SysDevel/'s
role in serving the needs of our IMPACT project, /SysDevel/ provides a
general tool for other multi-model simulations that would otherwise
require extensive effort to tie together. The =distutils= extension of
/SysDevel/, for instance, has been used in other projects at LANL.

There are, of course, many ongoing challenges in realizing the
/SysDevel/ concept in full. On-the-fly model insertion, decoupling
computation from data hosting, and desktop and high-performance
visualization methods all need a good deal more attention. The
complexity of environment discovery for the build system is
particularly challenging because of all the possible combinations of
operating systems, package management tools, compilers, etc., and thus
is only truly testable through wide and diverse usage.

Finally, as the advent of cloud-computing resources has made
high-performance and massively-parallel computing more accessible than
ever, it is becoming rapidly apparent that the other side of that coin
yields very copious amounts of acquired and generated data. Due to its
sheer mass, such data sets produce their own challenges beyond that of
mere computation. So while /SysDevel/ tries to ease the pain of
complex integration of resource-intensive code, it also seeks to
provide a flexible interface to large data sets, particularly in the
context of OpenScience. Both storage (local and remote) and
computation are relatively cheap, but the trade-off is control, or
more specifically the lack of it. We believe you can have your data
and compute with it too. The future of /SysDevel/ will be to confront
the challenges in utilizing cloud computing remotely while maintaining
local control of your hard-won data.

We invite you to try the =sysdevel= package, released
under the open-source Mozilla Public License, at
https://github.com/sean-m-brennan/pysysdevel.


* Acknowledgments

Funding for this work was provided by the U. S. Department of Energy
through the Los Alamos National Laboratory Directed Research and Development
program.



\begin{thebibliography}{1}

\bibitem{folk_hdf} Mike Folk, Albert Cheng, and Kim Yates. "HDF5: A file format and I/O library for high performance computing applications." Proceedings of Supercomputing, vol. 99. 1999.

\bibitem{knuth_literate} Donald Ervin Knuth. "Literate programming." The Computer Journal vol. 27, no. 2 (1984): 97-111.

\bibitem{koller_impact} Josef Koller, Sean Brennan, Humberto Godinez Vazquez, David Higdon, Moriba Jah, Thomas Kelecy, Alexei Klimenko, Brian Larsen, Earl Lawrence, Richard Linares, Craig McLaughlin, Piyush Mehta, David Palmer, Aaron Ridley, Michael Shoemaker, Eric Sutton, David Thompson, Andrew Walker, and Brendt Wohlberg. "The IMPACT Framework for Enabling System Analysis of Satellite Conjunctions", accepted AAS/AIAA Space Flight Mechanics Meeting, 2014.

\bibitem{schulte_org_mode} Eric Schulte, Dan Davison, Thomas Dye, and Carsten Dominik. "A multi-language computing environment for literate programming and reproducible research." Journal of Statistical Software vol. 46, no. 3 (2012): 1-24.

\bibitem{shoemaker_tomography} Michael Shoemaker, Brendt Wohlberg, Richard Linares, David Palmer, Alexei Klimenko, David Thompson, and Jospeh Koller. "Comparisons of Satellite Orbit Tomography with Simultaneous Atmospheric Density and Orbit Estimation Methods", accepted AAS/AIAA Space Flight Mechanics Meeting, 2014.

\bibitem{stodden_runmycode} Victoria Stodden, Christophe Hurlin, and Christophe Pérignon. "RunMyCode. org: a novel dissemination and collaboration platform for executing published computational results." Proceedings of the IEEE 8th International Conference on e-Science, (2012): 1-8.

\bibitem{vallado_revisiting} David A. Vallado, Paul Crawford, Richard Hujsak, and T.S. Kelso. “Revisiting Spacetrack Report #3,” AIAA/AAS Astrodynamics Specialist Conference, Keystone, CO. August 21–24 2006.

\bibitem{walker_gas} Andrew Walker, Michael Shoemaker, Josef Koller, and Piyush Mehta. "Gas-surface Interactions for Satellites Orbiting in the Lower Exosphere", accepted AAS/AIAA Space Flight Mechanics Meeting, 2014.

\end{thebibliography}

