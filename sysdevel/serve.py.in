#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright 2013.  Los Alamos National Security, LLC.
This material was produced under U.S. Government contract
DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is
operated by Los Alamos National Security, LLC for the U.S. Department
of Energy. The U.S. Government has rights to use, reproduce, and
distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS
NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
modified to produce derivative works, such modified software should be
clearly marked, so as not to confuse it with the version available
from LANL.

Licensed under the Mozilla Public License, Version 2.0 (the
"License"); you may not use this file except in compliance with the
License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/2.0/

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
"""
# pylint: disable=W0105
'''
NOTE: requires the following be defined in distutils environment:
  WEBSOCKET_PORT
  WEBSOCKET_ORIGIN
  WEBSOCKET_TLS_PKEY
  WEBSOCKET_TLS_CERT
  WEBSOCKET_RESOURCE
  WEBSOCKET_ADD_RESOURCES
'''


import os
import sys
import logging
import time
import tempfile
import socket
import traceback
try:
    import json
except ImportError:
    import simplejson as json

from sysdevel.modeling import websocketserver, websockethandler, daemon, models

## user defined and co-located, see sysdevel.modeling.generic_query.py
from .query import query  ##FIXME incompatible with 2.4


WEBSOCKET_HOST     = socket.getfqdn()
WEBSOCKET_PORT     = @@{WEBSOCKET_PORT}
WEBSOCKET_ORIGIN   = "@@{WEBSOCKET_ORIGIN}"
WEBSOCKET_TLS_PKEY = @@{WEBSOCKET_TLS_PKEY}
WEBSOCKET_TLS_CERT = @@{WEBSOCKET_TLS_CERT}

RESOURCE           = "@@{WEBSOCKET_RESOURCE}"
SERVICE_NAME       = RESOURCE.upper()
ADDTNL_RESOURCES   = "@@{WEBSOCKET_ADD_RESOURCES}".split(',')



class ServiceQuery(websockethandler.WebHandlerService):
    def __init__(self, dispatcher, extra_resource=None):
        websockethandler.WebHandlerService.__init__(self, SERVICE_NAME +
                                                    ' query service')
        self.socket_dispatch = dispatcher
        self.extra_resource = extra_resource.strip('/')


    def handle_message(self, message):
        handled = False
        self.log.info('Resource "' + self.extra_resource + '" requested')
        try:
            if self.extra_resource is None or self.extra_resource == '':
                if message.lower().startswith('list_steps'):
                    content = message[11:]
                    if self.socket_dispatch != None and content:
                        msg_tpls = query.list_steps(json.loads(content))
                        if msg_tpls != None:
                            for m in msg_tpls:
                                self.socket_dispatch.send_data(
                                    'STEP' + str(m[0]) + ':' +
                                    json.dumps(m[1],
                                               default=websockethandler.json_handler))
                    handled = True

                elif message.lower().startswith('last_step'):
                    content = message[10:]
                    if self.socket_dispatch != None:
                        msg = query.last_step(json.loads(content))
                        if msg != None:
                            self.socket_dispatch.send_data(
                                'STEP' + str(query.max_steps+1) + ':' +
                                json.dumps(msg,
                                           default=websockethandler.json_handler))
                    handled = True

                elif message.lower().startswith('step'):
                    step_num = int(message[4])
                    content = message[6:]
                    if self.socket_dispatch != None:
                        try:
                            func = getattr(query, 'step' + str(step_num))
                            print repr(func)
                            msg = func(json.loads(content))
                            if msg != None:
                                if isinstance(msg, Exception):
                                    self.socket_dispatch.send_data('ERROR:' +
                                                                   str(msg))
                                else:
                                    self.socket_dispatch.send_data(
                                        'STEP' + str(step_num+1) +  ':' +
                                        json.dumps(msg,
                                                   default=websockethandler.json_handler))
                        except AttributeError:
                            self.log.warn("Unknown step: " + message)
                    handled = True

            else:
                for resource in ADDTNL_RESOURCES:
                    if resource == self.extra_resource:
                        handler = __import__(resource,
                                             globals={"__name__": __name__})
                        self.log.info('Handling through "' + resource + '"')
                        if handler.handle_message(self, message):
                            handled = True
                            
            if not handled:
                self.log.warn("Unknown command: " + message)
        except Exception:  # pylint: disable=W0703
            self.log.warn(traceback.format_exc())
                
    def closing(self):
        return False

    def quit(self):
        pass


class ServiceBatch(websockethandler.WebHandlerService):
    def __init__(self, dispatcher, param_dict):
        websockethandler.WebHandlerService.__init__(self, SERVICE_NAME +
                                                    ' batch service')
        self.socket_dispatch = dispatcher
        self.parameters = dict()
        try:
            is_json = isinstance(param_dict, basestring)
        except NameError:
            is_json = isinstance(param_dict, str)
        try:
            if is_json:
                param_dict = json.loads(param_dict)
            if query.validate_parameters(param_dict):
                self.parameters = param_dict
            else:
                if self.socket_dispatch != None:
                    error = 'ERROR:Invalid parameters.'
                    self.socket_dispatch.send_data(error)
        except:  # pylint: disable=W0702
            pass

    def handle_message(self, _):
        ## not using input
        results = "RESULT:"
        try:
            results += json.dumps(query.last_step(self.parameters),
                                  default=websockethandler.json_handler)
            if self.socket_dispatch != None:
                self.socket_dispatch.send_data(results)
        except models.UnknownModelException:
            e = sys.exc_info()[1]
            error = "ERROR:" + str(e)
            if self.socket_dispatch != None:
                self.socket_dispatch.send_data(error)
        except NotImplementedError:
            e = sys.exc_info()[1]
            error = "ERROR:" + str(e)
            if self.socket_dispatch != None:
                self.socket_dispatch.send_data(error)
        except:  # pylint: disable=W0702
            pass

    def closing(self):
        return False

    def quit(self):
        pass



class ServiceSpawn(websockethandler.WebResourceFactory):
    def __call__(self, dispatcher, resource):
        service = None
        if resource.startswith('/' + RESOURCE + '/'):
            service = ServiceQuery(dispatcher, resource[len(RESOURCE)+2:])
            service.start()
        elif resource.startswith('/' + RESOURCE + '_batch/'):
            subs = resource[len(RESOURCE)+8:].split('/')
            params = dict()
            for sub in subs:
                key_val = sub.split('=')
                params[key_val[0]] = key_val[1]
            service = ServiceBatch(dispatcher, params)
            service.start()
        return service


class ServiceServer(websockethandler.WebServer):
    def __init__(self, log_file, log_level=logging.WARNING, verbose=False):
        websockethandler.WebServer.__init__(self, log_file, log_level)
        self.webserver = websocketserver.WebSocketServer(ServiceSpawn,
                                                         WEBSOCKET_HOST,
                                                         WEBSOCKET_PORT,
                                                         WEBSOCKET_ORIGIN,
                                                         WEBSOCKET_TLS_PKEY,
                                                         WEBSOCKET_TLS_CERT,
                                                         True, verbose)

    def run(self):
        self.webserver.start()
        while True:
            time.sleep(.05)

    def quit(self):
        try:
            self.webserver.quit()
            self.webserver.join(1)
        except RuntimeError:
            logging.getLogger().error('webserver thread: ' +
                                      str(sys.exc_info()[1]))


class ServiceDaemon(daemon.Daemon):
    _svc_name_ = SERVICE_NAME + '_Server'
    _svc_display_name_ = SERVICE_NAME + ' Server'

    def __init__(self, debug=logging.WARNING):
        log_file = os.path.join(tempfile.gettempdir(),
                                SERVICE_NAME + '_Server.log')
        logging.basicConfig(filename=log_file,
                            format='%(asctime)s  %(name)s - %(message)s',
                            level=debug)
        self.webserver = websocketserver.WebSocketServer(ServiceSpawn,
                                                         WEBSOCKET_HOST,
                                                         WEBSOCKET_PORT,
                                                         WEBSOCKET_ORIGIN,
                                                         WEBSOCKET_TLS_PKEY,
                                                         WEBSOCKET_TLS_CERT,
                                                         True)
        super(ServiceDaemon, self).__init__(log_file)
        self.log = logging.getLogger()

    def stop(self):
        self.webserver.quit()
        self.webserver.join(1)
        self.sleep(1)
        self.log.info('Shutting down ' + SERVICE_NAME + ' websocket server.')
        self.log.info('----------------------------------------')
        self.force_stop()
  
    def run(self):
        self.webserver.start()
        self.log.info('Started ' + SERVICE_NAME + ' websocket server.')
        while True:
            time.sleep(.05)


##############################


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    if '--no-daemon' in argv:
        try:
            server = ServiceServer(None)
            server.run()
        except KeyboardInterrupt:
            server.quit()

    elif '-d' in argv or '--debug' in argv:
        verbose = False
        level = logging.INFO
        if '-v' in argv or '--verbose' in argv:
            verbose = True
            level = logging.DEBUG
        try:
            server = ServiceServer(None, level, verbose)
            server.run()
        except KeyboardInterrupt:
            server.quit()

    else:
        server = ServiceDaemon(logging.WARNING)
        server.start()


if __name__ == "__main__":
    main()
